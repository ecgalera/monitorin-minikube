AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: String
    Description: "The name of the SSH key pair to use"

Resources:
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: "Name"
          Value: "MyVPC"

  MySubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "MySubnet"

  MyInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "MyInternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: "Name"
          Value: "MyRouteTable"

  MyRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  MyRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP, Prometheus, Grafana, and SSH traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "3000"
          ToPort: "3000"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "9090"
          ToPort: "9090"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "9113"
          ToPort: "9113"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: "MySecurityGroup"

  MyInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.medium"
      SecurityGroupIds: [ !Ref MySecurityGroup ]
      SubnetId: !Ref MySubnet
      ImageId: "ami-0866a3c8686eaeeba"  # Ubuntu 20.04 LTS (Reemplazar según región)
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          echo "Configuración inicial de Minikube y Kubernetes" > /var/log/user-data.log

          # Actualizar el sistema
          apt-get update -y
          apt-get upgrade -y

          # Instalar Docker
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu

          # Instalar kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

          # Instalar Minikube
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          install minikube-linux-amd64 /usr/local/bin/minikube

          # Iniciar Minikube
          minikube start --driver=docker

          # Esperar a que Minikube esté corriendo
          echo "Esperando a que Minikube esté listo..."
          until minikube status | grep -q "host: Running"; do
            sleep 30
            echo "Minikube no está listo, esperando..."
          done

          echo "Minikube está corriendo." >> /var/log/user-data.log
